{
  "hash": "64fbc471914d0933e0d834b17a4e4d31",
  "result": {
    "markdown": "---\ntitle: \"Question 2\"\n---\n\n\n\n``` r\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvert_quarto_to_audio <- function(quarto_file_path, language = \"en-us\", sample_rate = \"44khz_16bit_stereo\") {\n  # Load required libraries\n  library(httr)\n  \n  # Read Quarto file\n  quarto_content <- readLines(quarto_file_path)\n  \n  # Concatenate all lines of the Quarto file into a single string\n  quarto_text <- paste(quarto_content, collapse = \"\\n\")\n  quarto_text <- gsub(\"#\", \"\", quarto_text)\n  \n  # Call Text-to-Speech API\n  endpoint <- \"http://api.voicerss.org/\"\n  params <- list(key = api_key, src = quarto_text, hl = language, c = \"MP3\", f = sample_rate)\n  response <- POST(endpoint, body = params)\n  \n  # Check for errors in API response\n  if (http_error(response)) {\n    stop(\"Error:\", content(response, \"text\"))\n  }\n  \n  # Generate output filename based on input filename\n  input_filename <- basename(quarto_file_path)\n  output_filename <- gsub(\"\\\\.qmd$\", \".mp3\", input_filename)  # Replace .qmd extension with .mp3\n  \n  # Save audio file\n  output_path <- file.path(\"~/Documents/GSoC'24\", output_filename)\n  writeBin(content(response, \"raw\"), output_path)\n  cat(\"Audio file saved:\", output_path, \"\\n\")\n}\n```\n:::\n",
    "supporting": [
      "q2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}