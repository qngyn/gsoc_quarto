convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Extract text content from chapters
chapters <- grep("^##\\s+", quarto_content, value = TRUE)
# Iterate through chapters and convert text to speech
for (i in seq_along(chapters)) {
# Extract chapter content
chapter_title <- chapters[i]
chapter_start_index <- grep(chapter_title, quarto_content)
if (i < length(chapters)) {
chapter_end_index <- grep(chapters[i + 1], quarto_content) - 1
} else {
chapter_end_index <- length(quarto_content)
}
chapter_content <- quarto_content[(chapter_start_index + 1):chapter_end_index]
chapter_text <- paste(chapter_content, collapse = " ")
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = chapter_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Save audio file
if (!http_error(response)) {
filename <- paste0(output_folder, "/chapter_", sprintf("%02d", i), ".mp3")
writeBin(content(response, "raw"), filename)
cat("Audio file saved:", filename, "\n")
} else {
warning("Error converting chapter to audio:", chapter_title)
}
}
}
# Test cases
convert_quarto_to_audio("intro.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("intro.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
quarto_text
quarto_text
quarto_content <- readLines("index.qmd")
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text
convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- gsub("#", "", quarto_text)
quarto_text <- paste(quarto_content, collapse = "\n")
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- gsub("#", "", quarto_text)
quarto_text <- paste(quarto_content, collapse = "\n")
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
quarto_text <- gsub("#", "", quarto_text)
quarto_text
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text
convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text <- gsub("#", "", quarto_text)
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text <- gsub("#", "", quarto_text)
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
convert_quarto_to_audio <- function(quarto_file_path, output_folder, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text <- gsub("#", "", quarto_text)
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd", "audio_output", "7634fb7204ef42af94324588155a32d7")
convert_quarto_to_audio <- function(quarto_file_path, api_key, language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text <- gsub("#", "", quarto_text)
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd", "7634fb7204ef42af94324588155a32d7")
convert_quarto_to_audio <- function(quarto_file_path, api_key = "7634fb7204ef42af94324588155a32d7", language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text <- gsub("#", "", quarto_text)
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd")
quarto_files <- list.files(path = ".", pattern = "\\.qmd$", full.names = TRUE)
quarto_files
source("~/Documents/GSoC'24/pre_render_script.R")
saveRDS(list(quarto_files = quarto_files, output_folder = output_folder, api_key = api_key, language = language, sample_rate = sample_rate), "pre_render_params.RDS")
saveRDS(list(quarto_files = quarto_files, output_folder = audio_folder, api_key = api_key, language = language, sample_rate = sample_rate), "pre_render_params.RDS")
saveRDS(list(quarto_files = quarto_files, output_path = output_path, api_key = api_key, language = language, sample_rate = sample_rate), "pre_render_params.RDS")
saveRDS(list(quarto_files = quarto_files, api_key = api_key, language = language, sample_rate = sample_rate), "pre_render_params.RDS")
params <- readRDS("pre_render_params.RDS")
params
for (quarto_file in params$quarto_files) {
convert_quarto_to_audio(quarto_file, params$output_path)
}
quarto_files <- list.files(path = ".", pattern = "\\.qmd$", full.names = TRUE)
quarto_files
response <- POST(endpoint, body = params)
params <- readRDS("pre_render_params.RDS")
source("convertQuartoToAudio.R")
for (quarto_file in params$quarto_files) {
convert_quarto_to_audio(quarto_file, params$output_path)
}
convert_quarto_to_audio <- function(quarto_file_path, api_key = "7634fb7204ef42af94324588155a32d7", language = "en-us", sample_rate = "44khz_16bit_stereo") {
# Load required libraries
library(httr)
# Read Quarto file
quarto_content <- readLines(quarto_file_path)
# Concatenate all lines of the Quarto file into a single string
quarto_text <- paste(quarto_content, collapse = "\n")
quarto_text <- gsub("#", "", quarto_text)
# Call Text-to-Speech API
endpoint <- "http://api.voicerss.org/"
params <- list(key = api_key, src = quarto_text, hl = language, c = "MP3", f = sample_rate)
response <- POST(endpoint, body = params)
# Check for errors in API response
if (http_error(response)) {
stop("Error:", content(response, "text"))
}
# Generate output filename based on input filename
input_filename <- basename(quarto_file_path)
output_filename <- gsub("\\.qmd$", ".mp3", input_filename)  # Replace .qmd extension with .mp3
# Save audio file
output_path <- file.path("~/Documents/GSoC'24", output_filename)
writeBin(content(response, "raw"), output_path)
cat("Audio file saved:", output_path, "\n")
}
# Example usage:
convert_quarto_to_audio("index.qmd")
convert_quarto_to_audio(quarto_file)
for (quarto_file in params$quarto_files) {
convert_quarto_to_audio(quarto_file)
}
quarto_files <- list.files(path = ".", pattern = "\\.qmd$", full.names = TRUE)
quarto_files <- list.files(path = ".", pattern = "\\.qmd$", full.names = TRUE)
quarto_files <- list.files(path = ".", pattern = "\\.qmd$", full.names = TRUE)
for (quarto_file in params$quarto_files) {
convert_quarto_to_audio(quarto_file)
}
pre_render_params <- readRDS("~/Documents/GSoC'24/pre_render_params.RDS")
pre_render_params
params <- readRDS("pre_render_params.RDS")
params$api_key
